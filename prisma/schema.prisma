generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  uid           String   @id @unique
  name          String
  email         String   @unique
  os            String
  byFind        String
  github_id     String?  @unique
  zenn_id       String?  @unique
  slack_user_id String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  payment       Payment?
  profile       Profile?
  status        Status?
}

enum Role {
  free
  lite
  closer
  admin
}

model Payment {
  id                         String   @id @unique
  stripe_customer_id         String?  @unique
  stripe_checkout_status     String?
  // https://stripe.com/docs/api/checkout/sessions/object#checkout_session_object-status
  stripe_subscription_status String?
  // https://stripe.com/docs/api/subscriptions/object#subscription_object-status
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  account                    Account  @relation(fields: [id], references: [uid], onDelete: NoAction)
}

model Profile {
  id           String   @id @unique
  name         String
  introduction String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  account      Account  @relation(fields: [id], references: [uid], onDelete: NoAction)
}

model Status {
  id               String   @id @unique
  role             Role     @default(free)
  checked_out      Boolean  @default(false)
  lessons          String[] @default([])
  lesson_histories String[] @default([])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  account          Account  @relation(fields: [id], references: [uid], onDelete: NoAction)
}

model DiscordLearningSession {
  slack_timestamp   String   @id @unique
  joined_member_ids String[]
  created_at        DateTime @default(now())
}
